
pex_mpiharness examples/shutdowntest
----------------------------------------------

Running the example:
--------------------

To place the example stages into the working PYTHONPATH : 


% export PYTHONPATH ${PEX_HARNESS_DIR}/examples/stages:${PYTHONPATH}    (bash)

or

% setenv PYTHONPATH ${PEX_HARNESS_DIR}/examples/stages:${PYTHONPATH}     (tcsh)



One executes the pipeline then with:

% launchMpiPipeline.py shutdowntest_policy.paf  <some-run-id>

such as 

% launchMpiPipeline.py shutdowntest_policy.paf  test_2390

One can specify a name and a logging level on the command line as well:

% launchMpiPipeline.py shutdowntest_policy.paf test_10025 mytemplate -L 3 


Description
-----------

The shutdowntest example demonstrates how to shutdown a Pipeline and Slices via a Shutdown event
characeterized by a level of urgency. 

The levels that designate the manner in which the shutdown proceeds are :
 * Shutdown at level 1 : stop immediately by killing process (ugly)
 * Shutdown at level 2 : exit in a clean manner (Pipeline and Slices) at a synchronization point 
 * Shutdown at level 3 : exit in a clean manner (Pipeline and Slices) at the end of a Stage
 * Shutdown at level 4 : exit in a clean manner (Pipeline and Slices) at the end of a Visit


The template example has a single application stage, ShutdownTestStageSerial/ShutdownTestStageParallel , 
which may be found in  pex_harness/examples/stages/lsst/pexhexamples/pipeline.py

By default this example will run with the Pipeline with one Slice on a single node.
Edit the MPI machine file "nodelist.scr" to specify the hostname of the local machine. 

The pipeline is then executed via, for example,

% launchMpiPipeline.py shutdowntest_policy.paf  test_2390

The shutdown test sample stage is a dummy application stage that "wastes time", running through 
a loop within the Slice process(), and calling a sleep function each iteration.  During this 
interval the user may send a shutdown event via 

% python triggerShutdownEventTransmitter.py

The Pipeline runs a ShutdownThread alongside the main execution and listens for the shutdown events 
on a topic specified in policy.  Upon receiving the shutdown event, the system of the Pipeline and 
Slices is taken down by the Pipeline in a manner consistent with the level of urgency designated 
within the shutdown event. 

If an ActiveMQ broker ("eventHostBroker") other than the LSST default (lsst8.ncsa.uiuc.edu) 
is used, this needs to be specified in the pipeline policy file under "eventBrokerHost". 


